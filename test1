import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import bellSound from "@/assets/bell.mp3";

export default function PomodoroTimer() {
  const [time, setTime] = useState(25 * 60);
  const [isRunning, setIsRunning] = useState(false);

  useEffect(() => {
    let timer;
    if (isRunning) {
      timer = setInterval(() => {
        setTime((prevTime) => {
          if (prevTime === 1) {
            playSound();
          }
          return prevTime > 0 ? prevTime - 1 : 0;
        });
      }, 1000);
    } else {
      clearInterval(timer);
    }
    return () => clearInterval(timer);
  }, [isRunning]);

  const playSound = () => {
    const audio = new Audio(bellSound);
    audio.play();
  };

  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes}:${secs < 10 ? "0" : ""}${secs}`;
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-[#E6E6FA] text-gray-800 p-6">
      <Card className="w-full max-w-md p-6 shadow-lg bg-white rounded-2xl">
        <CardContent className="flex flex-col items-center">
          <h1 className="text-2xl font-bold mb-4">Pomodoro Timer</h1>
          <div className="text-4xl font-mono mb-4">{formatTime(time)}</div>
          <Progress value={(time / (25 * 60)) * 100} className="w-full mb-4" />
          <div className="flex gap-4">
            <Button onClick={() => setIsRunning(!isRunning)}>
              {isRunning ? "Pause" : "Start"}
            </Button>
            <Button onClick={() => { setTime(25 * 60); setIsRunning(false); }}>Reset</Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
